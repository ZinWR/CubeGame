'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const pluginutils = require('@rollup/pluginutils');

function index(userOptions = {}) {
  const options = Object.assign(
    {
      include: [
        "**/*.vs",
        "**/*.fs",
        "**/*.vert",
        "**/*.frag",
        "**/*.glsl",
        "**/*.wgsl"
      ],
      compress: true
    },
    userOptions
  );
  const filter = pluginutils.createFilter(options.include, options.exclude);
  const compress = options.compress === true ? defaultCompress : options.compress;
  return {
    name: "vite-plugin-string",
    async transform(source, id) {
      if (!filter(id))
        return;
      return {
        code: pluginutils.dataToEsm(compress ? await compress(source) : source),
        map: null
      };
    }
  };
}
function defaultCompress(code) {
  let needNewline = false;
  return code.replace(
    /\\(?:\r\n|\n\r|\n|\r)|\/\*.*?\*\/|\/\/(?:\\(?:\r\n|\n\r|\n|\r)|[^\n\r])*/g,
    ""
  ).split(/\n+/).reduce((result, line) => {
    line = line.trim().replace(/\s{2,}|\t/, " ");
    if (line.charAt(0) === "#") {
      if (needNewline) {
        result.push("\n");
      }
      result.push(line, "\n");
      needNewline = false;
    } else {
      result.push(
        line.replace(
          /\s*({|}|=|\*|,|\+|\/|>|<|&|\||\[|\]|\(|\)|-|!|;)\s*/g,
          "$1"
        )
      );
      needNewline = true;
    }
    return result;
  }, []).join("").replace(/\n+/g, "\n");
}

exports.default = index;
exports.defaultCompress = defaultCompress;
